import tkinter as tk
import tkinter.messagebox as messagebox
import yfinance as yf
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import NavigationToolbar2Tk

class MiniPriceWindow(tk.Toplevel):
    def __init__(self, parent, latest_price, price_change_percentage):
        super().__init__(parent)
        self.title("Price Monitor")
        self.latest_price = latest_price
        self.price_change_percentage = price_change_percentage
        self.always_on_top = tk.BooleanVar(value=False)
        self.create_widgets()
        self.create_always_on_top_checkbox()

    def create_widgets(self):
        color = "red" if self.price_change_percentage > 0 else "green" if self.price_change_percentage < 0 else "black"
        self.latest_price_label = tk.Label(self, text=f"{self.latest_price:.2f}", fg=color, font=("Arial", 20))
        self.latest_price_label.pack()

        self.price_change_label = tk.Label(self, text=f"{self.price_change_percentage:.2f}%", fg=color, font=("Arial", 20))
        self.price_change_label.pack()

    def create_always_on_top_checkbox(self):
        checkbox = tk.Checkbutton(self, text="Always on top", var=self.always_on_top, command=self.set_always_on_top)
        checkbox.pack()

    def set_always_on_top(self):
        self.attributes('-topmost', self.always_on_top.get())

    def update_data(self, latest_price, price_change_percentage):
        color = "red" if price_change_percentage > 0 else "green" if price_change_percentage < 0 else "black"
        self.latest_price_label.config(text=f"{latest_price:.2f}", fg=color)
        self.price_change_label.config(text=f"{price_change_percentage:.2f}%", fg=color)



class StockApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Real-Time Stock Price Tracking")
        self.geometry("1000x800")
        
        self.latest_price = None
        self.price_change_percentage = None
        
        self.figure = Figure(figsize=(6, 4), dpi=100)
        self.ax = self.figure.add_subplot(111)
        
        self.plot_window = None
        
        self.create_widgets()
        self.update_data()  # 启动自动刷新循环

    def create_widgets(self):
        self.input_frame = tk.Frame(self)
        self.input_frame.pack(pady=10)

        self.stock_code_label = tk.Label(self.input_frame, text="Enter Stock Code:")
        self.stock_code_label.grid(row=0, column=0, padx=5)

        self.stock_code_entry = tk.Entry(self.input_frame)
        self.stock_code_entry.grid(row=0, column=1, padx=5)

        self.update_button = tk.Button(self.input_frame, text="Update Data", command=self.retrieve_data)
        self.update_button.grid(row=0, column=2, padx=5)

        self.data_frame = tk.Frame(self)
        self.data_frame.pack(fill='x')

        self.latest_price_label = tk.Label(self.data_frame, text="N/A", font=("Arial", 32))
        self.latest_price_label.pack(side=tk.LEFT, padx=6)

        self.price_change_label = tk.Label(self.data_frame, text="N/A", font=("Arial", 12))
        self.price_change_label.pack(side=tk.LEFT, padx=9)

        self.output = tk.Text(self, height=30, width=150)
        self.output.pack(pady=10)

        self.alert_frame = tk.Frame(self)
        self.alert_frame.pack(pady=10)

        self.lower_price_label = tk.Label(self.alert_frame, text="Set lower price alert:")
        self.lower_price_label.pack(side=tk.LEFT)

        self.lower_price_entry = tk.Entry(self.alert_frame)
        self.lower_price_entry.pack(side=tk.LEFT)

        self.upper_price_label = tk.Label(self.alert_frame, text="Set upper price alert:")
        self.upper_price_label.pack(side=tk.LEFT)

        self.upper_price_entry = tk.Entry(self.alert_frame)
        self.upper_price_entry.pack(side=tk.LEFT)

        self.mini_window_button = tk.Button(self.input_frame, text="Open Mini Price Window", command=self.create_mini_price_window)
        self.mini_window_button.grid(row=0, column=3, padx=5)

    def retrieve_data(self):
        ticker = self.stock_code_entry.get()
        if ticker:
            stock = yf.Ticker(ticker)
            data = stock.history(period="1d", interval="1m")
            data_string = data.to_string()
            self.output.delete('1.0', tk.END)
            self.output.insert(tk.END, data_string)

            if not data.empty:
                self.latest_price = data['Close'].iloc[-1]
                self.price_change_percentage = ((data['Close'].iloc[-1] - data['Open'].iloc[0]) / data['Open'].iloc[0]) * 100
                self.update_latest_price_and_change()
                self.plot_data(data)

            self.check_alerts()

    def update_latest_price_and_change(self):
        if self.latest_price is not None and self.price_change_percentage is not None:
            color = "red" if self.price_change_percentage > 0 else "green" if self.price_change_percentage < 0 else "black"
            self.latest_price_label.config(text=f"{self.latest_price:.2f}", fg=color)
            self.price_change_label.config(text=f"{self.price_change_percentage:.2f}%", fg=color)

    def check_alerts(self):
        try:
            lower_limit = float(self.lower_price_entry.get()) if self.lower_price_entry.get() else None
            upper_limit = float(self.upper_price_entry.get()) if self.upper_price_entry.get() else None

            if self.latest_price is not None:
                if lower_limit and self.latest_price <= lower_limit:
                    messagebox.showwarning("Price Alert", f"Price is below your set lower limit: {lower_limit}")
                if upper_limit and self.latest_price >= upper_limit:
                    messagebox.showwarning("Price Alert", f"Price is above your set upper limit: {upper_limit}")
        except ValueError as e:
            messagebox.showerror("Error", f"Please enter a valid limit price. Error: {e}")

    def create_mini_price_window(self):
        if self.latest_price is not None and self.price_change_percentage is not None:
            mini_window = MiniPriceWindow(self, self.latest_price, self.price_change_percentage)
            mini_window.geometry("200x100")
            mini_window.resizable(False, False)

    def update_data(self):
        self.retrieve_data()
        # 重新调度 update_data 方法，例如每分钟刷新一次
        self.after(60000, self.update_data)  # 60000毫秒 = 1分钟
    
    def plot_data(self, data):
        if not self.plot_window or not tk.Toplevel.winfo_exists(self.plot_window):
            self.plot_window = tk.Toplevel(self)
            self.plot_window.title("Stock Price Plot")
            self.figure = Figure(figsize=(6, 4), dpi=100)
            self.ax = self.figure.add_subplot(111)
            self.canvas = FigureCanvasTkAgg(self.figure, master=self.plot_window)
            self.canvas_widget = self.canvas.get_tk_widget()
            self.canvas_widget.pack(fill=tk.BOTH, expand=True)
            self.toolbar = NavigationToolbar2Tk(self.canvas, self.plot_window)
            self.toolbar.update()
            self.canvas._tkcanvas.pack(fill=tk.BOTH, expand=True)

        self.ax.clear()
        data['Close'].plot(ax=self.ax)
        self.ax.set_title('Stock Price Over Time')
        self.ax.set_ylabel('Price')
        self.ax.grid(True)
        self.canvas.draw()

# 程序入口点
if __name__ == "__main__":
    app = StockApp()
    app.mainloop()