import sys
import importlib
import subprocess

REQUIRED_MODULES = ["tkinter", "matplotlib", "yfinance"] 

def check_modules():
    missing_modules = []
    for module in REQUIRED_MODULES:
        try:
            importlib.import_module(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print(f"Missing required modules: {', '.join(missing_modules)}")
        install = input("Install missing modules? (y/n) ")
        if install.lower() == 'y':
            for module in missing_modules:
                subprocess.check_call([sys.executable, "-m", "pip", "install", module]) 
        else:
            print("Please install the missing modules before running the app")
            return False
    
    return True

import tkinter as tk
import tkinter.messagebox as messagebox
import yfinance as yf
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import NavigationToolbar2Tk

class StockApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("及時股價追蹤")  # 设置窗口标题
        self.geometry("1000x800")  # 设置窗口大小
        self.create_widgets()  # 调用创建界面元素的方法
        self.plot_window = None  # 初始化用于绘图的窗口变量
        self.figure = Figure(figsize=(6, 4), dpi=100)  # 创建绘图所需的Figure对象
        self.ax = self.figure.add_subplot(111)  # 添加子图用于绘制
        self.update_data()  # 调用更新数据的方法

        # 新增自定义文本标签
        self.custom_text = tk.Label(self, text="台股記得打完代碼後加.tw(ex:2330.tw)") 
        self.custom_text.config(font=("Arial", 15))
        self.custom_text.pack()
    
    def create_widgets(self):
        # 使用 grid 布局来放置输入相关的元素
        self.input_frame = tk.Frame(self)  # 创建一个框架用于放置输入相关的元素
        self.input_frame.pack(pady=10)  # 放置框架并设置垂直间距

        # 在 input_frame 中放置标签、输入框和按钮
        self.stock_code_label = tk.Label(self.input_frame, text="Enter Stock Code:")
        self.stock_code_label.grid(row=0, column=0, padx=5)  # 放置标签并设置水平间距

        self.stock_code_entry = tk.Entry(self.input_frame)
        self.stock_code_entry.grid(row=0, column=1, padx=5)  # 放置输入框并设置水平间距

        self.update_button = tk.Button(self.input_frame, text="Update Data", command=self.retrieve_data)
        self.update_button.grid(row=0, column=2, padx=5)  # 放置按钮并设置水平间距

        # 使用 pack 布局来放置数据展示相关的元素
        self.data_frame = tk.Frame(self)  # 创建一个框架用于放置数据展示相关的元素
        self.data_frame.pack(fill='x')  # 放置框架并填充水平空间

        # 在 data_frame 中放置显示最新价格和涨跌幅的标签
        self.latest_price_label = tk.Label(self.data_frame, text="Latest Price: N/A", font=("Arial", 32))
        self.latest_price_label.pack(side=tk.LEFT, padx=6)  # 放置最新价格标签并设置水平间距

        self.price_change_label = tk.Label(self.data_frame, text="Price Change: N/A", font=("Arial", 12))
        self.price_change_label.pack(side=tk.LEFT, padx=9)  # 放置涨跌幅标签并设置水平间距

        self.output = tk.Text(self, height=30, width=150)  # 创建文本框用于显示股票数据
        self.output.pack(pady=10)  # 放置文本框并设置垂直间距

        # 添加用于设置价格警报的输入框和标签
        self.alert_frame = tk.Frame(self)
        self.alert_frame.pack(pady=10)

        self.lower_price_label = tk.Label(self.alert_frame, text="Set lower price alert:")
        self.lower_price_label.pack(side=tk.LEFT)

        self.lower_price_entry = tk.Entry(self.alert_frame)
        self.lower_price_entry.pack(side=tk.LEFT)

        self.upper_price_label = tk.Label(self.alert_frame, text="Set upper price alert:")
        self.upper_price_label.pack(side=tk.LEFT)

        self.upper_price_entry = tk.Entry(self.alert_frame)
        self.upper_price_entry.pack(side=tk.LEFT)

    def retrieve_data(self):
            ticker = self.stock_code_entry.get()
            if ticker:
                stock = yf.Ticker(ticker)
                data = stock.history(period="1d", interval="1m")
                data_string = data.to_string()
                self.output.delete('1.0', tk.END)
                self.output.insert(tk.END, data_string)
                self.update_latest_price_and_change(data)
                self.plot_data(data)
                self.check_alert(data)  # 确保数据获取后再检查警报

    def check_alert(self, data):
        if not data.empty:
            latest_price = data['Close'].iloc[-1]

            # 检查上限警报
            try:  # 使用 try...except 结构来捕获可能的转换错误
                upper_limit = self.upper_price_entry.get()
                if upper_limit and latest_price >= float(upper_limit):
                    messagebox.showwarning("价格警告", f"价格高于您设置的上限：{upper_limit}")
            except ValueError:
                messagebox.showerror("错误", "请输入一个有效的上限价格")

            # 检查下限警报
            try:
                lower_limit = self.lower_price_entry.get()
                if lower_limit and latest_price <= float(lower_limit):
                    messagebox.showwarning("价格警告", f"价格低于您设置的下限：{lower_limit}")
            except ValueError:
                messagebox.showerror("错误", "请输入一个有效的下限价格")

    def update_latest_price_and_change(self, data):
        if not data.empty:
            latest_price = data['Close'].iloc[-1]
            opening_price = data['Open'].iloc[0]

            price_change = latest_price - opening_price
            price_change_percentage = (price_change / opening_price) * 100

            # 更新最新价格和涨跌幅标签
            self.latest_price_label.config(text=f"{latest_price:.2f}")
            self.price_change_label.config(text=f"{price_change_percentage:.2f}%")

            # 根据价格变化调整数字颜色
            color = "red" if price_change > 0 else "green"
            self.latest_price_label.config(fg=color)
            self.price_change_label.config(fg=color)

    def plot_data(self, data):
        if not self.plot_window:
            self.plot_window = tk.Toplevel(self)
            self.plot_window.title("Stock Price Plot")
            self.figure = Figure(figsize=(6, 4), dpi=100)
            self.ax = self.figure.add_subplot(111)
            self.canvas = FigureCanvasTkAgg(self.figure, master=self.plot_window)
            self.canvas_widget = self.canvas.get_tk_widget()
            self.canvas_widget.pack(fill=tk.BOTH, expand=True)

            # 添加导航工具栏
            self.toolbar = NavigationToolbar2Tk(self.canvas, self.plot_window)
            self.toolbar.update()
            self.canvas._tkcanvas.pack(fill=tk.BOTH, expand=True)

    def update_data(self):
        # 调用 retrieve_data 方法以更新数据
        self.retrieve_data()
        # 设置定时器，60000 毫秒后再次调用 update_data 方法来更新数据
        self.after(60000, self.update_data)

    def plot_data(self, data):
        if not self.plot_window:
            self.plot_window = tk.Toplevel(self)
            self.plot_window.title("Stock Price Plot")
            self.figure = Figure(figsize=(6, 4), dpi=100)
            self.ax = self.figure.add_subplot(111)
            self.canvas = FigureCanvasTkAgg(self.figure, master=self.plot_window)
            self.canvas_widget = self.canvas.get_tk_widget()
            self.canvas_widget.pack(fill=tk.BOTH, expand=True)

            # 添加导航工具栏
            self.toolbar = NavigationToolbar2Tk(self.canvas, self.plot_window)
            self.toolbar.update()
            self.canvas._tkcanvas.pack(fill=tk.BOTH, expand=True)

        self.ax.clear()
        data['Close'].plot(ax=self.ax)
        self.ax.set_title('Stock Price Over Time')
        self.ax.set_ylabel('Price')
        self.ax.grid(True)

        # 显示最新价格和涨跌幅
        if not data.empty:
            latest_price = data['Close'].iloc[-1]
            opening_price = data['Open'].iloc[0]
            price_change = latest_price - opening_price
            price_change_percentage = (price_change / opening_price) * 100
            # 在图表上显示最新价格和涨跌幅
            self.ax.text(0.01, 0.97, f'Latest Price: {latest_price:.2f}', transform=self.ax.transAxes, fontsize=10, verticalalignment='top')
            self.ax.text(0.01, 0.92, f'Price Change: {price_change_percentage:.2f}%', transform=self.ax.transAxes, fontsize=10, verticalalignment='top')

        self.canvas.draw()

if __name__ == "__main__":
    if check_modules():
        app = StockApp()
        app.mainloop()